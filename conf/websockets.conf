server {
    location /s {
        content_by_lua '
            local redis = require "resty.redis"
            local server = require "resty.websocket.server"
            local wb, err = server:new{
                timeout = 10000,
                max_payload_len = 65535
            }
            if not wb then
                ngx.log(ngx.ERR, "failed to new websocket: ", err)
                return ngx.exit(444)
            end
            local push = function()
                local wb = wb

                local red = redis:new()

                red:set_timeout(10000)

                local ok, err = red:connect("127.0.0.1", 6379)

                if not ok then
                    ngx.log(ngx.ERR, "failed to connect redis: ", err)
                    return ngx.exit(444)
                end

                while true do
                    local ans, err = red:brpop("/sub/message", 5)
                    if not ans then
                        ngx.log(ngx.ERR, "failed to brpop from redis: ", err)
                    elseif ans == ngx.null then
                        --ngx.log(ngx.INFO, "brpop null from redis")
                    else
                        local msg = ans[2]
                        if msg then
                            local bytes, err = wb:send_text(msg)
                            if not bytes then
                                ngx.log(ngx.ERR, "failed to send text: ", err)
                                return ngx.exit(444)
                            end
                        end
                    end

                end
            end

            ngx.thread.spawn(push)

            while true do
                local data, typ, err = wb:recv_frame()
                if wb.fatal then
                    ngx.log(ngx.ERR, "failed to receive frame: ", err)
                    return ngx.exit(444)
                end
                if not data then
                    ngx.log(ngx.INFO, "send ping")
                    local bytes, err = wb:send_ping()
                    if not bytes then
                        ngx.log(ngx.ERR, "failed to send ping: ", err)
                        return ngx.exit(444)
                    end
                elseif typ == "close" then break
                elseif typ == "ping" then
                    local bytes, err = wb:send_pong()
                    if not bytes then
                        ngx.log(ngx.ERR, "failed to send pong: ", err)
                        return ngx.exit(444)
                    end
                    ngx.log(ngx.INFO, "client ping")
                elseif typ == "pong" then
                    ngx.log(ngx.INFO, "client ponged")
                elseif typ == "text" then

                    local red = redis:new()

                    red:set_timeout(2000)

                    local ok, err = red:connect("127.0.0.1", 6379)

                    if not ok then
                        ngx.log(ngx.ERR, "failed to connect redis: ", err)
                        return ngx.exit(444)
                    end

                    local ok, err = red:lpush("/sub/message", data)
                    if not ok then
                        ngx.log(ngx.ERR, "failed to lpush: ", err)
                        return ngx.exit(444)
                    end

                    local ok, err = red:set_keepalive(10000, 100)
                    if not ok then
                        ngx.log(ngx.ERR, "failed to set keepalive: ", err)
                        return ngx.exit(444)
                    end

                end
            end
            wb:send_close()
        ';
    }

}
